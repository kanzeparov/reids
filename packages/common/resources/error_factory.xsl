<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text" encoding="Windows-1252"/>

    <xsl:template match="/" >
// Autogenerated file

import * as moment from 'moment'
import { BigNumber } from 'bignumber.js'
import { ErrorType, <xsl:for-each select="/errors/error">IError<xsl:value-of select="./@name"/><xsl:if test="position() &lt; last()">,
         </xsl:if></xsl:for-each> } from '@onder/interfaces'

export default class ErrorFactory {
  private constructor () {
  }
<xsl:for-each select="/errors/error">
  public static async create<xsl:value-of select="./@name"/>Error (<xsl:for-each select="./parameter"><xsl:choose>
  <xsl:when test="./@type='function'"><xsl:if test="position() != 1">, </xsl:if><xsl:value-of select="./@name"/>?: <xsl:value-of select="./@return"/></xsl:when>
  <xsl:otherwise><xsl:if test="position() != 1">, </xsl:if><xsl:value-of select="./@name"/><xsl:if test="./@optional='true'">?</xsl:if>: <xsl:value-of select="./@type"/></xsl:otherwise></xsl:choose></xsl:for-each>): Promise&lt;IError<xsl:value-of select="./@name"/>> {
    return Promise.resolve({ type: ErrorType.<xsl:value-of select="./@name"/><xsl:for-each select="./parameter">,
      <xsl:value-of select="./@name"/>: <xsl:choose>
  <xsl:when test="./@type='function'"><xsl:choose>
    <xsl:when test="./@side='back'"><xsl:value-of select="./@name"/> ? <xsl:value-of select="./@name"/> : await ErrorFunctions.<xsl:value-of select="./@function_name"/>(<xsl:for-each select="./arg"><xsl:if test="position() != 1">, </xsl:if><xsl:choose>
      <xsl:when test="./@type='parameter'"><xsl:value-of select="./@value"/></xsl:when>
    </xsl:choose></xsl:for-each>)</xsl:when>
    <xsl:otherwise></xsl:otherwise></xsl:choose></xsl:when>
  <xsl:otherwise><xsl:value-of select="./@name"/></xsl:otherwise></xsl:choose></xsl:for-each> } as IError<xsl:value-of select="./@name"/>)
  }
</xsl:for-each>
}
</xsl:template>
</xsl:stylesheet>
