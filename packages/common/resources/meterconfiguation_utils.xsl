<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text" encoding="Windows-1252"/>

    <xsl:variable name="lowercase" select="'abcdefghijklmnopqrstuvwxyz'" />
    <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />


    <xsl:template match="/" >
// Autogenerated file
import { BigNumber } from 'bignumber.js'
import { IMeterConfiguration,
         ConnectionKind<xsl:for-each select="/meters/meter">,
         IMeterConfiguration<xsl:value-of select="./@name"/></xsl:for-each> } from '@onder/interfaces'
import Logger from '@machinomy/logger'

const log = new Logger('onder-common-meterconfigurationutils')

namespace MeterConfigurationUtils {
export function getFaultValue (configuration: IMeterConfiguration): BigNumber {
  return <xsl:for-each select="/meters/meter[parameter/@name='faultValue']">configuration.kind === ConnectionKind.<xsl:value-of select="./@name"/><xsl:if test="position() &lt; last()"> ||
         </xsl:if></xsl:for-each> ? configuration.faultValue : new BigNumber(0)
}

export function getAccountPassword (configuration: IMeterConfiguration): string {
  // FIXME ONDER ALPHA
  // if (configuration.kind === ConnectionKind.OnderAlpha) {
  //  console.log('Illegal using!')
  //  return configuration.passwords ? configuration.passwords[0] : process.env.ACCOUNT_PASSWORD ? process.env.ACCOUNT_PASSWORD : ''
  // }
  return <xsl:for-each select="/meters/meter[parameter/@name='password']">configuration.kind === ConnectionKind.<xsl:value-of select="./@name"/><xsl:if test="position() &lt; last()"> ||
         </xsl:if></xsl:for-each> ? configuration.password ? configuration.password : process.env.ACCOUNT_PASSWORD ? process.env.ACCOUNT_PASSWORD : '' : process.env.ACCOUNT_PASSWORD ? process.env.ACCOUNT_PASSWORD : ''
}
<xsl:for-each select="/meters/meter">
export function isIMeterConfiguration<xsl:value-of select="./@name"/> (object: any): object is IMeterConfiguration<xsl:value-of select="./@name"/> {
  if (!('account' in object)) {
    log.warn("'account' expected in IMeterConfiguration<xsl:value-of select="./@name"/>")
    return false
  }
  if (!('kind' in object)) {
    log.warn("'kind' expected in IMeterConfiguration<xsl:value-of select="./@name"/>")
    return false
  }<xsl:for-each select="./parameter[not(@optional) or @optional!='true']">
  if (!('<xsl:value-of select="./@name"/>' in object)) {
    log.warn("'<xsl:value-of select="./@name"/>' expected in IMeterConfiguration<xsl:value-of select="./@name"/>")
    return false
  }</xsl:for-each>
  return true
}
</xsl:for-each>
export function isIMeterConfiguration (object: any): object is IMeterConfiguration {
  if (!('kind' in object)) {
    log.warn("'kind' expected in IMeterConfiguration<xsl:value-of select="./@name"/>")
    return false
  }
  switch (object.kind) {<xsl:for-each select="/meters/meter">
    case ConnectionKind.<xsl:value-of select="./@name"/>:
      return isIMeterConfiguration<xsl:value-of select="./@name"/>(object)</xsl:for-each>
  }
  return false
}
}
export default MeterConfigurationUtils
</xsl:template>
</xsl:stylesheet>
