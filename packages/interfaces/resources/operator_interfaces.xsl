<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text" encoding="Windows-1252"/>

    <xsl:template match="/" >
// Autogenerated file
import { BigNumber } from 'bignumber.js'
import { Moment } from 'moment'
import { ErrorType } from '../errors'
<xsl:for-each select="/operator/interfaces/interface">
interface <xsl:value-of select="./@name"/><xsl:if test="./@parent!=''"> extends <xsl:value-of select='./@parent'/></xsl:if> {<xsl:for-each select="./property"><xsl:text>
  </xsl:text><xsl:if test="./@readonly='true'">readonly </xsl:if><xsl:value-of select="./@name"/><xsl:if test="./@optional='true'">?</xsl:if>: <xsl:value-of select="./@type"/></xsl:for-each>
}
</xsl:for-each>
enum OperatorEventType {
  Unknown = 0<xsl:for-each select="/operator/events/event">,
  <xsl:value-of select="./@name"/> = <xsl:value-of select="position()"/></xsl:for-each>
}

enum OperatorEventName {
  Unknown = 'Unknown'<xsl:for-each select="/operator/events/event">,
  <xsl:value-of select="./@name"/> = '<xsl:value-of select="./@name"/>'</xsl:for-each>
}
<xsl:for-each select="/operator/events/event">
interface I<xsl:value-of select="./@name"/>Event {
  type: OperatorEventType.<xsl:value-of select="./@name"/><xsl:for-each select="./param"><xsl:text>
  </xsl:text><xsl:value-of select="./@name"/><xsl:if test="./@optional='true'">?</xsl:if>: <xsl:value-of select="./@type"/></xsl:for-each>
}
</xsl:for-each>
type IOperatorEvent = <xsl:for-each select="/operator/events/event">I<xsl:value-of select="./@name"/>Event<xsl:if test="position() != last()"> |
                      </xsl:if></xsl:for-each>

export {
  OperatorEventType,
  OperatorEventName,<xsl:for-each select="/operator/events/event">
  I<xsl:value-of select="./@name"/>Event,</xsl:for-each><xsl:for-each select="/operator/interfaces/interface"><xsl:text>
  </xsl:text><xsl:value-of select="./@name"/>,</xsl:for-each>
  IOperatorEvent
}
</xsl:template>
</xsl:stylesheet>
